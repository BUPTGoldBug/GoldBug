package bupt.ugrd.controller;

/**
 * Created by Luyao on 2018/1/20.
 */

import bupt.ugrd.model.*;
import bupt.ugrd.model.Content;
import bupt.ugrd.pojo.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


@RestController
@RequestMapping("/goldbug")
public class GoldBugController {

    private static final double MIN_CATCH_DIST = Math.pow(39.96008812868229-39.96008607279046, 2)+Math.pow(116.35574385523798-116.3558578491211, 2);

    // This means to get the bean called userinfoRepositor which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private ContentRepository contentRepository;

    @Autowired
    private BuginfoRepository buginfoRepository;

    @Autowired
    private Buginfo2Repository buginfo2Repository;

    @Autowired
    private DebugrecordRepository debugrecordRepository;

    @Autowired
    private Userinfo2Repository userinfo2Repository;


    @RequestMapping("getAroundBugs")
    public @ResponseBody List<BugBasic> getAroundBugs(@RequestBody Coordinate userTmp){
        List<BugBasic> bugList = new ArrayList<>();

        Iterable<Buginfo2> bugs = buginfo2Repository.findAll();
        for(Buginfo2 bug: bugs){
            if(bug.getStatus()==0 || bug.getStatus()==1){
                // 根据userTmp计算当前bug是否需要被加入到bugList中-----------TODO----------------
                BugBasic bugBasic = new BugBasic();
                bugBasic.setLon(bug.getLon());
                bugBasic.setLat(bug.getLat());
                bugBasic.setBugId(bug.getBugId().getId());
                bugBasic.setArIndex(bug.getArIndex());
                bugList.add(bugBasic);
            }

        }
        return bugList;

    }


    @RequestMapping("addGoldBug") //@RequestBody BugInfo bugInfo, @RequestBody Content content
    public @ResponseBody Result addNewGoldbug(@RequestBody BugContent bugContent){

        BugInfo bugInfo = bugContent.getBugInfo();
        bupt.ugrd.pojo.Content content = bugContent.getContent();


        Buginfo bug = new Buginfo();
        bug.setDeathTime(bugInfo.getDeathTime());
        bug.setStartTime(bugInfo.getStartTime());
        bug.setStart_lat(bugInfo.getStart_lat());
        bug.setStart_lon(bugInfo.getStart_lon());
        bug.setEnd_lat(bugInfo.getEnd_lat());
        bug.setEnd_lon(bugInfo.getEnd_lon());
        bug.setIfNeedStartTime(bugInfo.isIfNeedStartTime());
        bug.setIsMoved(bugInfo.isMoved());
        bug.setLifecount(bugInfo.getLifecount());
        bug.setPlanter(bugInfo.getPlanter());
        buginfoRepository.save(bug);



        Buginfo2 buginfo2 = new Buginfo2();
        buginfo2.setBugId(bug);
        buginfo2.setLifecount(bugInfo.getLifecount());
        buginfo2.setStatus(-1);
        buginfo2.setArIndex(content.getArIndex());
        buginfo2Repository.save(buginfo2);
        System.out.println("This New BUG is Connecting with  Bug "+buginfo2.getBugId().getId()+"in the Table BugInfo~~~~~~~~~`");



        bupt.ugrd.model.Content cont = new bupt.ugrd.model.Content();
        cont.setBugId(bug.getId());
        cont.setDescription(content.getDescription());
        cont.setQuestion(content.getQuestion());
        cont.setScore(content.getScore());
        cont.setAns_1(content.getAns_1());
        cont.setAns_2(content.getAns_2());
        cont.setAns_3(content.getAns_3());
        cont.setAns_4(content.getAns_4());
        cont.setContentType(content.getContentType());
        cont.setKey_(content.getKey_());
        contentRepository.save(cont);

        return new Result(true, "sucess", 0);

    }

    @RequestMapping("/getSpecBug")
    public @ResponseBody BugSpecOne getSpecBug(@RequestBody  Common common){
        int bid = common.getBid();
        int userId = common.getUserId();

        int arIndex = 0;
        int lifecount = 0;

        BugSpecOne bugSpecOne = new BugSpecOne();

        bugSpecOne.setSuccess(false);

        Iterable<Buginfo2> buginfo2s = buginfo2Repository.findAll();
        for(Buginfo2 bug:buginfo2s){
            if(bug.getBugId().getId().intValue() == bid){
                double distTmp = Math.pow(bug.getLon()-common.getRt_lon(), 2)+Math.pow(bug.getLat()-common.getRt_lat(), 2);
                if(distTmp > MIN_CATCH_DIST){
                    bugSpecOne.setDes("距离虫子再近点才能答题哦");
                    return bugSpecOne;
                }
                else {
                    arIndex = bug.getArIndex();
                    lifecount = bug.getLifecount();
                }
            }
        }


        Iterable<Debugrecord> debugrecords = debugrecordRepository.findAll();
        for(Debugrecord record: debugrecords){
            // 已经捉虫成功
            if(record.getBugId().intValue()== bid && record.getUserId().intValue() == userId && record.getState() == 0){
                bugSpecOne.setDes("已经成功回答过啦");
                return bugSpecOne;
            }
        }


        bugSpecOne.setArIndex(arIndex);
        bugSpecOne.setLifecount(lifecount);


        bupt.ugrd.model.Content content_ = contentRepository.findOne(bid);
        List<String> answers = new ArrayList<String>();
        answers.add(content_.getAns_1());
        answers.add(content_.getAns_2());
        answers.add(content_.getAns_3());
        answers.add(content_.getAns_4());
        bugSpecOne.setAnswer(answers);
        bugSpecOne.setBugId(bid);
        bugSpecOne.setQuestion(content_.getQuestion());
        bugSpecOne.setSuccess(true);
        bugSpecOne.setScore(content_.getScore());

        return bugSpecOne;
    }


    @RequestMapping("/vaildBug")
    public @ResponseBody Result vaildBug(@RequestBody  Common common ){
        Debugrecord record = new Debugrecord();
        int userId = common.getUserId();
        double userScore = 0;

        String choose = common.getChoose();
        Result result = new Result();
        int state = 1;

        int bid = common.getBugId();
        boolean res = false;


        Iterable<Buginfo2> buginfo2s = buginfo2Repository.findAll();
        for(Buginfo2 buginfo2: buginfo2s){
            if(buginfo2.getBugId().getId().intValue() == bid){

                if(buginfo2.getStatus() == 1){
                    return new Result(false, "Wait for it to activate!", 1);
                }
                else {
                    record.setBugId(bid);
                    record.setUserId(common.getUserId());
                    record.setDebugDate(common.getDebugDate());

                    bupt.ugrd.model.Content content_ = contentRepository.findOne(bid);
                    if(content_.getKey_().equals(choose)){
                        res = true;
                    }

                    if(res){
                        Userinfo2 userTmp = userinfo2Repository.findOne(userId);
                        userScore = userTmp.getScore();

                        int lifecount = buginfo2.getLifecount();
                        if(lifecount == 1){
                            buginfo2.setLifecount(0);
                            buginfo2.setStatus(2);
                            state = 0;

                            userScore += content_.getScore();
                            userTmp.setScore(userScore);
                            userinfo2Repository.save(userTmp);
                        }
                        else if(lifecount > 1){
                            lifecount-=1;
                            buginfo2.setLifecount(lifecount);
                            state = 0;

                            userScore += content_.getScore();
                            userTmp.setScore(userScore);
                            userinfo2Repository.save(userTmp);
                        }
                        else {
                            state = 1;
                            buginfo2.setStatus(-2);
                        }
                        buginfo2Repository.save(buginfo2);

                        record.setState(state);
                        debugrecordRepository.save(record);

                    }
                    else{
                        state = 1;
                        record.setState(state);
                        debugrecordRepository.save(record);

                        return new Result(false, "answer validation failure", 1);
                    }


                }

            }
        }

        return new Result(true, "sucess", 0);
    }


}
